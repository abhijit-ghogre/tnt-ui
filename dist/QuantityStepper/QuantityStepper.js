"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const md_1 = require("react-icons/md");
const getButtonSizeClass = (size) => {
    switch (size) {
        case "xs":
            return "btn-xs";
        case "sm":
            return "btn-sm";
        case "lg":
            return "btn-lg";
        case "md":
        default:
            return "btn-md";
    }
};
const getInputSizeClass = (size) => {
    switch (size) {
        case "xs":
            return "input-xs";
        case "sm":
            return "input-sm";
        case "lg":
            return "input-lg";
        case "md":
        default:
            return "input-md";
    }
};
function QuantityStepper(props) {
    const { value, onChange, min = 0, max = 999999999999999, className = "", size = "md", } = props;
    const handleChange = (newValue) => {
        if (newValue === "") {
            onChange(0);
            return;
        }
        const inputValue = parseInt(newValue, 10);
        if (Number.isNaN(inputValue)) {
            return;
        }
        if (inputValue < min || inputValue > max) {
            return;
        }
        onChange(inputValue);
    };
    return (react_1.default.createElement("div", { className: `flex border w-fit overflow-hidden ${className}` },
        react_1.default.createElement("button", { className: `btn btn-ghost btn-xs no-animation rounded-r-none
          ${getButtonSizeClass(size)}
        `, onClick: () => handleChange(`${value - 1}`), disabled: value <= min },
            react_1.default.createElement(md_1.MdRemove, null)),
        react_1.default.createElement("input", { onChange: (e) => handleChange(e.target.value), type: "text", placeholder: "10", className: `input focus:bg-transparent text-center px-1 rounded-none input-xs 
          ${getInputSizeClass(size)}
        `, size: value.toString().length + 4, value: value, onFocus: (e) => e.target.select(), onKeyDown: (e) => {
                if (e.key === "ArrowUp") {
                    e.preventDefault();
                    handleChange(`${value + 1}`);
                }
                if (e.key === "ArrowDown") {
                    e.preventDefault();
                    handleChange(`${value - 1}`);
                }
            } }),
        react_1.default.createElement("button", { className: `btn btn-ghost btn-xs no-animation rounded-l-none
          ${getButtonSizeClass(size)}
        `, onClick: () => handleChange(`${value + 1}`), disabled: value >= max },
            react_1.default.createElement(md_1.MdAdd, null))));
}
exports.default = QuantityStepper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUXVhbnRpdHlTdGVwcGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbXBvbmVudHMvUXVhbnRpdHlTdGVwcGVyL1F1YW50aXR5U3RlcHBlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrREFBMEI7QUFDMUIsdUNBQWlEO0FBYWpELE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxJQUFVLEVBQUUsRUFBRTtJQUN4QyxRQUFRLElBQUksRUFBRTtRQUNaLEtBQUssSUFBSTtZQUNQLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLEtBQUssSUFBSTtZQUNQLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLEtBQUssSUFBSTtZQUNQLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLEtBQUssSUFBSSxDQUFDO1FBQ1Y7WUFDRSxPQUFPLFFBQVEsQ0FBQztLQUNuQjtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxJQUFVLEVBQUUsRUFBRTtJQUN2QyxRQUFRLElBQUksRUFBRTtRQUNaLEtBQUssSUFBSTtZQUNQLE9BQU8sVUFBVSxDQUFDO1FBQ3BCLEtBQUssSUFBSTtZQUNQLE9BQU8sVUFBVSxDQUFDO1FBQ3BCLEtBQUssSUFBSTtZQUNQLE9BQU8sVUFBVSxDQUFDO1FBQ3BCLEtBQUssSUFBSSxDQUFDO1FBQ1Y7WUFDRSxPQUFPLFVBQVUsQ0FBQztLQUNyQjtBQUNILENBQUMsQ0FBQztBQUVGLFNBQVMsZUFBZSxDQUFDLEtBQVk7SUFDbkMsTUFBTSxFQUNKLEtBQUssRUFDTCxRQUFRLEVBQ1IsR0FBRyxHQUFHLENBQUMsRUFDUCxHQUFHLEdBQUcsZUFBZSxFQUNyQixTQUFTLEdBQUcsRUFBRSxFQUNkLElBQUksR0FBRyxJQUFJLEdBQ1osR0FBRyxLQUFLLENBQUM7SUFFVixNQUFNLFlBQVksR0FBRyxDQUFDLFFBQWdCLEVBQUUsRUFBRTtRQUN4QyxJQUFJLFFBQVEsS0FBSyxFQUFFLEVBQUU7WUFDbkIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1osT0FBTztTQUNSO1FBRUQsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUUxQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDNUIsT0FBTztTQUNSO1FBRUQsSUFBSSxVQUFVLEdBQUcsR0FBRyxJQUFJLFVBQVUsR0FBRyxHQUFHLEVBQUU7WUFDeEMsT0FBTztTQUNSO1FBRUQsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZCLENBQUMsQ0FBQztJQUVGLE9BQU8sQ0FDTCx1Q0FBSyxTQUFTLEVBQUUscUNBQXFDLFNBQVMsRUFBRTtRQUM5RCwwQ0FDRSxTQUFTLEVBQUU7WUFDUCxrQkFBa0IsQ0FBQyxJQUFJLENBQUM7U0FDM0IsRUFDRCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQzNDLFFBQVEsRUFBRSxLQUFLLElBQUksR0FBRztZQUV0Qiw4QkFBQyxhQUFRLE9BQUcsQ0FDTDtRQUNULHlDQUNFLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQzdDLElBQUksRUFBQyxNQUFNLEVBQ1gsV0FBVyxFQUFDLElBQUksRUFDaEIsU0FBUyxFQUFFO1lBQ1AsaUJBQWlCLENBQUMsSUFBSSxDQUFDO1NBQzFCLEVBQ0QsSUFBSSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUNqQyxLQUFLLEVBQUUsS0FBSyxFQUNaLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFDakMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLFNBQVMsRUFBRTtvQkFDdkIsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO29CQUNuQixZQUFZLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDOUI7Z0JBQ0QsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLFdBQVcsRUFBRTtvQkFDekIsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO29CQUNuQixZQUFZLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDOUI7WUFDSCxDQUFDLEdBQ0Q7UUFDRiwwQ0FDRSxTQUFTLEVBQUU7WUFDUCxrQkFBa0IsQ0FBQyxJQUFJLENBQUM7U0FDM0IsRUFDRCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQzNDLFFBQVEsRUFBRSxLQUFLLElBQUksR0FBRztZQUV0Qiw4QkFBQyxVQUFLLE9BQUcsQ0FDRixDQUNMLENBQ1AsQ0FBQztBQUNKLENBQUM7QUFFRCxrQkFBZSxlQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBNZEFkZCwgTWRSZW1vdmUgfSBmcm9tIFwicmVhY3QtaWNvbnMvbWRcIjtcblxudHlwZSBTaXplID0gXCJ4c1wiIHwgXCJzbVwiIHwgXCJtZFwiIHwgXCJsZ1wiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICB2YWx1ZTogbnVtYmVyO1xuICBvbkNoYW5nZTogKHZhbHVlOiBudW1iZXIpID0+IHZvaWQ7XG4gIG1pbj86IG51bWJlcjtcbiAgbWF4PzogbnVtYmVyO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHNpemU/OiBTaXplO1xufVxuXG5jb25zdCBnZXRCdXR0b25TaXplQ2xhc3MgPSAoc2l6ZTogU2l6ZSkgPT4ge1xuICBzd2l0Y2ggKHNpemUpIHtcbiAgICBjYXNlIFwieHNcIjpcbiAgICAgIHJldHVybiBcImJ0bi14c1wiO1xuICAgIGNhc2UgXCJzbVwiOlxuICAgICAgcmV0dXJuIFwiYnRuLXNtXCI7XG4gICAgY2FzZSBcImxnXCI6XG4gICAgICByZXR1cm4gXCJidG4tbGdcIjtcbiAgICBjYXNlIFwibWRcIjpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwiYnRuLW1kXCI7XG4gIH1cbn07XG5cbmNvbnN0IGdldElucHV0U2l6ZUNsYXNzID0gKHNpemU6IFNpemUpID0+IHtcbiAgc3dpdGNoIChzaXplKSB7XG4gICAgY2FzZSBcInhzXCI6XG4gICAgICByZXR1cm4gXCJpbnB1dC14c1wiO1xuICAgIGNhc2UgXCJzbVwiOlxuICAgICAgcmV0dXJuIFwiaW5wdXQtc21cIjtcbiAgICBjYXNlIFwibGdcIjpcbiAgICAgIHJldHVybiBcImlucHV0LWxnXCI7XG4gICAgY2FzZSBcIm1kXCI6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBcImlucHV0LW1kXCI7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFF1YW50aXR5U3RlcHBlcihwcm9wczogUHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHZhbHVlLFxuICAgIG9uQ2hhbmdlLFxuICAgIG1pbiA9IDAsXG4gICAgbWF4ID0gOTk5OTk5OTk5OTk5OTk5LFxuICAgIGNsYXNzTmFtZSA9IFwiXCIsXG4gICAgc2l6ZSA9IFwibWRcIixcbiAgfSA9IHByb3BzO1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IChuZXdWYWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgaWYgKG5ld1ZhbHVlID09PSBcIlwiKSB7XG4gICAgICBvbkNoYW5nZSgwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpbnB1dFZhbHVlID0gcGFyc2VJbnQobmV3VmFsdWUsIDEwKTtcblxuICAgIGlmIChOdW1iZXIuaXNOYU4oaW5wdXRWYWx1ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXRWYWx1ZSA8IG1pbiB8fCBpbnB1dFZhbHVlID4gbWF4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb25DaGFuZ2UoaW5wdXRWYWx1ZSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17YGZsZXggYm9yZGVyIHctZml0IG92ZXJmbG93LWhpZGRlbiAke2NsYXNzTmFtZX1gfT5cbiAgICAgIDxidXR0b25cbiAgICAgICAgY2xhc3NOYW1lPXtgYnRuIGJ0bi1naG9zdCBidG4teHMgbm8tYW5pbWF0aW9uIHJvdW5kZWQtci1ub25lXG4gICAgICAgICAgJHtnZXRCdXR0b25TaXplQ2xhc3Moc2l6ZSl9XG4gICAgICAgIGB9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUNoYW5nZShgJHt2YWx1ZSAtIDF9YCl9XG4gICAgICAgIGRpc2FibGVkPXt2YWx1ZSA8PSBtaW59XG4gICAgICA+XG4gICAgICAgIDxNZFJlbW92ZSAvPlxuICAgICAgPC9idXR0b24+XG4gICAgICA8aW5wdXRcbiAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBoYW5kbGVDaGFuZ2UoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiMTBcIlxuICAgICAgICBjbGFzc05hbWU9e2BpbnB1dCBmb2N1czpiZy10cmFuc3BhcmVudCB0ZXh0LWNlbnRlciBweC0xIHJvdW5kZWQtbm9uZSBpbnB1dC14cyBcbiAgICAgICAgICAke2dldElucHV0U2l6ZUNsYXNzKHNpemUpfVxuICAgICAgICBgfVxuICAgICAgICBzaXplPXt2YWx1ZS50b1N0cmluZygpLmxlbmd0aCArIDR9XG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgb25Gb2N1cz17KGUpID0+IGUudGFyZ2V0LnNlbGVjdCgpfVxuICAgICAgICBvbktleURvd249eyhlKSA9PiB7XG4gICAgICAgICAgaWYgKGUua2V5ID09PSBcIkFycm93VXBcIikge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgaGFuZGxlQ2hhbmdlKGAke3ZhbHVlICsgMX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGUua2V5ID09PSBcIkFycm93RG93blwiKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBoYW5kbGVDaGFuZ2UoYCR7dmFsdWUgLSAxfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT17YGJ0biBidG4tZ2hvc3QgYnRuLXhzIG5vLWFuaW1hdGlvbiByb3VuZGVkLWwtbm9uZVxuICAgICAgICAgICR7Z2V0QnV0dG9uU2l6ZUNsYXNzKHNpemUpfVxuICAgICAgICBgfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVDaGFuZ2UoYCR7dmFsdWUgKyAxfWApfVxuICAgICAgICBkaXNhYmxlZD17dmFsdWUgPj0gbWF4fVxuICAgICAgPlxuICAgICAgICA8TWRBZGQgLz5cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBRdWFudGl0eVN0ZXBwZXI7XG4iXX0=